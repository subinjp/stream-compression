#!/usr/bin/env python3
from __future__ import print_function
import io
import zlib
import sys
import lzma
import datetime
import struct
import time
from sys import argv
ESC = 0x1A

USAGE='''
we used python3 to write this script
USAGE Example: nc x|tee a.bin|./compress_stream.py optional_timeout|tee b.bin|./decompress_stream.py >c.bin
'''

def read_data(header,packettype,bits,ignore):
    '''
    Helper function to read through remaining bytes within a packet
    bits-remaning bytes to read
    '''
    buffer = []
    #reading remaining bytes in the packet and remove escape bytes if not needed
    while bits > 0:
        next_byte=sys.stdin.buffer.read(1)
        it=iter(next_byte)
        value=next(it)
        if value == ESC:
            buffer.append(value)
            extrabyte=sys.stdin.buffer.read(1)
            it=iter(extrabyte)
            value=next(it)
            buffer.append(value)
            bits -=1
        else:
            bits -= 1
            buffer.append(value)

    if not ignore:
        data=bytes([header]+[packettype]+buffer)
        return data

#algorithm to compress the data
def deflate(contents):
    dat =zlib.compress(contents)
    size =len(dat)
    s=struct.pack("i",size)
    sys.stdout.buffer.write(s)
    sys.stdout.buffer.write(dat)
    sys.stdout.buffer.flush()

def main(timeout):
    no_error = True
    reset_timer = True
    micro_timeout=int(timeout)*1000
    while no_error:
        '''
        check first two bytes of packet
        rbr -remaining bytes to read from each packet
        '''
        two_bytes= sys.stdin.buffer.read(2)
        if len(two_bytes)==0:
            break
        #here we reset the buffer and start time
        if reset_timer:
            main_buffer = io.BytesIO()
            start_time=datetime.datetime.now()
            reset_timer = False

        #iterate over first two bytes of the packet
        it = iter(two_bytes)
        header =next(it)
        if header!=ESC:
            raise Exception("Error expected <esc>, but got header", header)
        packettype = next(it)

        #considering only the packets of type 2 and 3,else we drop the packets
        if packettype == ord('2'):
            rbr=14
            drop= False
            data=read_data(header,packettype,rbr,drop)
        elif packettype == ord('3'):
            rbr=21
            drop= False
            data=read_data(header,packettype,rbr,drop)
        else:
            rbr=21
            drop= True
            read_data(header,packettype,rbr,drop)

        #add to buffer only the packets of type 2 and 3
        if not drop:
            main_buffer.write(data)

        current_time=datetime.datetime.now()
        diff_time=current_time-start_time

        #at every 920 milliseconds,compress the data in the buffer
        if diff_time.microseconds >= micro_timeout:
            contents=main_buffer.getvalue()

            #calling compression algorithm
            deflate(contents)

            #reset timer to again start counting the packets
            reset_timer=True
        #stop compression if data is not coming more than 1 second
        if diff_time.seconds >=2:
            no_error=False


if __name__ == '__main__':
    if len(argv) != 2:
        main(timeout=850)
    else:
        main(argv[1])
